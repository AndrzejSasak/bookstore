/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.endriu.bookstore.api;

import com.endriu.bookstore.model.CartModel;
import com.endriu.bookstore.model.OrderModel;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-23T20:38:24.048672300+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "orderservice", description = "Operations regarding orders")
public interface OrderserviceApi {

    /**
     * GET /orderservice/orders : Returns the list of authenticated customer&#39;s orders
     *
     * @return List of authenticated customer&#39;s orders: (status code 200)
     */
    @Operation(
        operationId = "orderserviceOrdersGet",
        summary = "Returns the list of authenticated customer's orders",
        tags = { "orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of authenticated customer's orders:", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderModel>> orderserviceOrdersGet(
        
    );


    /**
     * GET /orderservice/orders/{orderId} : Returns the order of authenticated customer
     *
     * @param orderId  (required)
     * @return Order with given ID (status code 200)
     *         or The order exists but does not belong to the authenticated customer (status code 403)
     *         or The order does not exist (status code 404)
     */
    @Operation(
        operationId = "orderserviceOrdersOrderIdGet",
        summary = "Returns the order of authenticated customer",
        tags = { "orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order with given ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderModel.class))
            }),
            @ApiResponse(responseCode = "403", description = "The order exists but does not belong to the authenticated customer"),
            @ApiResponse(responseCode = "404", description = "The order does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orderservice/orders/{orderId}",
        produces = { "application/json" }
    )
    ResponseEntity<OrderModel> orderserviceOrdersOrderIdGet(
        @Parameter(name = "orderId", description = "", required = true) @PathVariable("orderId") Long orderId
    );


    /**
     * POST /orderservice/orders : Creates and order from cart
     *
     * @param cartModel Cart model (required)
     * @return Order created from cart (status code 200)
     *         or The cart is empty or not enough balance (status code 400)
     */
    @Operation(
        operationId = "orderserviceOrdersPost",
        summary = "Creates and order from cart",
        tags = { "orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order created from cart", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "The cart is empty or not enough balance")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orderservice/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<OrderModel> orderserviceOrdersPost(
        @Parameter(name = "CartModel", description = "Cart model", required = true) @Valid @RequestBody CartModel cartModel
    );

}
